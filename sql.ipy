#!/usr/bin/env ipython3 --
# -*- coding: utf-8 -*-

"""

Using the ipython sql extension.
https://github.com/catherinedevlin/ipython-sql

Requirements:
    pip3 install --upgrade pip ipython pymysql ipython-sql future

"""

from future.utils import iteritems
import argparse

try:
    import pymysql
    pymysql.install_as_MySQLdb()
except ImportError:
    pass

#####################################
CONFIG_FILE = 'conf.ini'
SECTION = 'mysql'
KEY = 'connection'

#####################################
# Parse parameters
parser = argparse.ArgumentParser()
parser.add_argument("pmdb")
parser.add_argument('remove', nargs='?', const=0, type=int, default=0)
args = parser.parse_args()
print("REMOVE %s" % args.remove)
delete = args.remove

#####################################
# Configuration file
try:
    import configparser
except ImportError:
    import ConfigParser as configparser
# Make sure configuration is case sensitive
config = configparser.RawConfigParser()
config.optionxform = str
# Read
config.read(CONFIG_FILE)
if SECTION not in config.sections():
    raise Exception("No configuration found for SQL connection")

# Get sconnect via config read?
sconnect = 'driver://user:passw@server:port/dbname'
for key, value in config.items(SECTION):
    if key == KEY:
        sconnect = value

#####################################
# SQL connection
%load_ext sql
%sql $sconnect
# Warning: you may reuse with %sql bioscai0@answers_PMDB
# or just with nothing if only one connection is already available
print("Connected")


#####################################
# Do some database work

# Example: %sql bioscai0@answers_PMDB SELECT count(*) FROM user

def printres(results, save_keys=[], disable_print=False):
    variables = []
    if len(results) < 1:
        raise Exception("No results found for this code")
    for row in results:
        counter = 0
        for value in row:
            key = results.keys[counter]
            counter += 1
            for match in save_keys:
                if key == match:
                    variables.append(value)
            if not disable_print:
                print("%s: %s" % (key, value))
    return variables


#####################################
myid = './pdbs/' + args.pmdb + '.pdb'
results = %sql SELECT * FROM model WHERE `3d` LIKE :myid
print("*** MODEL")
pmdb_id, gid = printres(results, ['id', 'id_group'])

#####################################
# Group info
results = %sql SELECT * FROM user WHERE id_group = :gid
print("*** AUTHOR")
printres(results)

print("\n\nREADY TO DELETE:")
#####################################
# Matching target
# Delete ?
if delete:
    %sql DELETE FROM target_model WHERE id_model = :pmdb_id
    print("Deleted Target")
else:
    results = %sql SELECT * FROM target_model WHERE id_model = :pmdb_id
    print(results)

#####################################
# Matching chains
if delete:
    %sql DELETE FROM map_model WHERE id_model = :pmdb_id
    print("Deleted Maps")
else:
    results = %sql SELECT * FROM map_model WHERE id_model = :pmdb_id
    print(results)

#####################################
# Delete from Main Model Table
if delete:
    %sql DELETE FROM model WHERE id = :pmdb_id
    print("Deleted Model")
else:
    print("Not REMOVED!")
