#!/usr/bin/env ipython2 --
# -*- coding: utf-8 -*-

"""
Using the ipython sql extension.
Trying some code that works with both python2 and python3

It requires: pip, ipython, ipython-sql, future
"""
from future.utils import iteritems

#####################################
CONFIG_FILE = 'conf.ini'
SECTION = 'mysql'
KEY = 'connection'

#####################################
## Parse parameters
import argparse
parser = argparse.ArgumentParser()
parser.add_argument("pmdb")
args = parser.parse_args()

#####################################
## Configuration file
try:
    import configparser
except ImportError:
    import ConfigParser as configparser
# Make sure configuration is case sensitive
config = configparser.RawConfigParser()
config.optionxform = str
# read
config.read(CONFIG_FILE)
if SECTION not in config.sections():
    raise Exception("No configuration found for SQL connection")

# Get sconnect via config read?
sconnect = 'driver://user:passw@server:port/dbname'
for key, value in config.items(SECTION):
    if key == KEY:
        sconnect = value

#####################################
## SQL connection
%load_ext sql
%sql $sconnect
# Warning: you may reuse with %sql bioscai0@answers_PMDB
# or just with nothing if only one connection is already available
print("Connected")

#####################################
## Do some database work

# Example:
#%sql bioscai0@answers_PMDB SELECT count(*) FROM user

def printres(results, save_keys=[]):
    variables = []
    for row in results:
        counter = 0
        for value in row:
            key = results.keys[counter]
            counter += 1
            for match in save_keys:
                if key == match:
                    variables.append(value)
            print("%s: %s" % (key,value))
    return variables

#####################################
myid = './pdbs/' + args.pmdb + '.pdb'
results = %sql SELECT * FROM model WHERE `3d` LIKE :myid
print("*** MODEL")
pmdb_id, gid = printres(results, ['id', 'id_group'])

#####################################
# Group info
results = %sql SELECT * FROM user WHERE id_group = :gid
print("*** AUTHOR")
printres(results)

print("\n\nREADY TO DELETE:")
#####################################
# Matching target
results = %sql SELECT * FROM target_model WHERE id_model = :pmdb_id
print(results)
# Delete ?

#####################################
# Matching chains
results = %sql SELECT * FROM map_model WHERE id_model = :pmdb_id
print(results)
# Delete ?

#####################################
# Delete from Main Model Table
